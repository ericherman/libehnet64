libehnet64: Easy Host-Network 64
------------------------------
multi-platfrom 64-bit versions of functions to convert between network and host byte orders


hton64 and ntoh64
-----------------
64-bit function to convert between network and host byte order

The header arpa/inet.h declares:

       uint32_t htonl(uint32_t host32);
       uint32_t ntohl(uint32_t net32);

       uint16_t htons(uint16_t host16);
       uint16_t ntohs(uint16_t net16);

however, nothing for 64 bit. Depending upon the platform, various
headers exist which implement similar 64 bit functions, but nothing as
standard as arpa/inet.h. The header ehnet64.h aims to work on any
platform and #defines these:

       uint64_t hton64(uint64_t host64);
       uint64_t ntoh64(uint64_t net64);


(I elected *not* to name the functions "htonll" and "ntohll" because
"long" and "long long" are the same on 64bit arch, and I think the 64 is
less ambiguous. You may wish to '#define htonll hton64' and '#define
ntohll ntoh64' in your code.)


Usage
-----

If using Autoconf, consider adding these to your configure.ac:

AC_CHECK_HEADERS([byteswap.h endian.h inttypes.h stdint.h])
AC_CHECK_FUNCS([bswap_32 bswap_64])

If defining by hand, define the applicable of the following:

#define HAVE_INTTYPES_H 1
#define HAVE_STDINT_H 1
#define HAVE_ENDIAN_H 1
#define HAVE_BYTESWAP_H 1
#define HAVE_BSWAP_32 1 /* not #defined actually a function */
#define HAVE_BSWAP_64 1 /* not #defined actually a function */

Finally, #include "ehnet64.h" into your source in order to make use of
the functions "hton64" and "ntoh64" in your program.


Building and Testing
--------------------
autoreconf -iv &&
 ./configure &&
 make check &&
 echo "Success."


Packaging
---------
# and if you wish:
make distcheck


License
-------
GNU Lesser General Public License (LGPL), version 3 or later.
See COPYING and COPYING.LESSER for details.
